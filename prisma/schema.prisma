// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoomType {
    MEETING
    REGULAR
}

enum Amenties {
    WHITEBOARD
    PROJECTOR
    TV
    INTERNET
    COFFEE
    TEA
    WATER
    SNACKS
}

model Profile {
    id        Int       @id @default(autoincrement())
    userId    String    @unique
    username  String
    bio       String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Cospace   Cospace?
    Booking   Booking[]

    @@index([username])
}

model Cospace {
    id          Int      @id @default(autoincrement())
    managerId   String   @unique
    manager     Profile  @relation(fields: [managerId], references: [userId])
    name        String
    description String
    coverImage  String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Room        Room[]

    @@index([name])
}

model Room {
    id           Int            @id @default(autoincrement())
    name         String
    type         RoomType
    amenties     Amenties[]
    capacity     Int
    cospaceId    Int
    cospace      Cospace        @relation(fields: [cospaceId], references: [id])
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Booking      Booking[]
    Availability Availability[]

    @@index([name])
}

model Availability {
    id        Int      @id @default(autoincrement())
    roomId    Int
    date      DateTime
    startTime DateTime
    endTime   DateTime
    isBooked  Boolean  @default(false)
    room      Room     @relation(fields: [roomId], references: [id])
}

model Booking {
    id        Int      @id @default(autoincrement())
    profileId Int
    roomId    Int? // Nullable for desk bookings
    startTime DateTime
    endTime   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    profile Profile @relation(fields: [profileId], references: [id])
    room    Room?   @relation(fields: [roomId], references: [id])
}
