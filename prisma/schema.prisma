// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum RoomType {
    MEETING
    REGULAR
}

enum Amenties {
    WHITEBOARD
    PROJECTOR
    TV
    INTERNET
    COFFEE
    TEA
    WATER
    SNACKS
}

enum Role {
    MANAGER
    MEMBER
}

model Profile {
    id              Int     @id @default(autoincrement())
    userId          String  @unique
    username        String
    bio             String?
    stripeAccountId String
    paymentsEnabled Boolean @default(false)

    role    Role      @default(MEMBER)
    Cospace Cospace?
    Booking Booking[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([username])
}

model Cospace {
    id          Int     @id @default(autoincrement())
    managerId   String  @unique
    manager     Profile @relation(fields: [managerId], references: [userId])
    name        String
    description String
    coverImage  String
    addresse    String  @default("")
    city        String  @default("")
    country     String  @default("")
    phone       String  @default("")
    email       String  @default("")
    website     String  @default("")
    Room        Room[]
    isFeatured  Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Room {
    id                Int            @id @default(autoincrement())
    name              String
    type              RoomType
    amenties          Amenties[]
    capacity          Int
    cospaceId         Int
    Booking           Booking[]
    Availability      Availability[]
    availabilityPrice Float

    cospace Cospace @relation(fields: [cospaceId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Availability {
    id        Int      @id @default(autoincrement())
    roomId    Int
    bookingId Int?
    date      DateTime
    startTime DateTime
    endTime   DateTime
    isBooked  Boolean  @default(false)

    room    Room     @relation(fields: [roomId], references: [id])
    Booking Booking? @relation(fields: [bookingId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Booking {
    id              Int            @id @default(autoincrement())
    profileId       Int
    roomId          Int? // Nullable for desk bookings
    stripeSessionId String         @unique
    availabilities  Availability[]
    payment         Float          @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    profile Profile @relation(fields: [profileId], references: [id])
    room    Room?   @relation(fields: [roomId], references: [id])
}
